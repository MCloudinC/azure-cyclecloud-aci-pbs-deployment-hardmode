# Multi-Stage Workflow 1 - Deploy CycleCloud
#
# This workflow is organized into logical stages that can be debugged and restarted independently:
# 1. Validation Stage - Check prerequisites and permissions
# 2. Planning Stage - Discover images and determine deployment strategy  
# 3. Deployment Stage - Deploy the container
# 4. Verification Stage - Validate deployment and generate outputs
#
# Required GitHub repository variables:
#   RESOURCE_GROUP                          (Azure resource group for deployment targets)
#   AZURE_REGION                            (Azure region for container instances)
#   VIRTUAL_NETWORK_NAME                    (VNet name for PRIVATE networking - REQUIRED)
#   VIRTUAL_NETWORK_RESOURCE_GROUP_NAME     (VNet resource group - REQUIRED)
#   VIRTUAL_NETWORK_SUBNET_NAME             (Subnet name - REQUIRED)
#
# SECURITY NOTE: This workflow ONLY supports private networking.
# All deployments require a VNet configuration. Public IP deployments are not permitted.

name: Workflow 1 - Deploy CycleCloud (Multi-Stage)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Azure resource group target"
        required: true
        type: choice
        options:
          - RG-BH_HPC_Cloud_Azure-NP-SUB-000005-EastUS-dev
          - RG-BH_HPC_Cloud_Azure-QA-SUB-000002-EastUS-qa
        default: RG-BH_HPC_Cloud_Azure-NP-SUB-000005-EastUS-dev
      image_tag:
        description: "CycleCloud image tag from mcr.microsoft.com/hpc/azure-cyclecloud"
        required: false
        type: string
        default: "latest"
      container_instance_name:
        description: "Azure Container Instance name"
        required: false
        type: string
        default: "cyclecloud-mcr"
      cpu_cores:
        description: "CPU cores requested for the container"
        required: false
        type: choice
        options:
          - "2"
          - "4"
          - "8"
        default: "2"
      memory_gb:
        description: "Memory in GiB requested for the container"
        required: false
        type: choice
        options:
          - "4"
          - "8"
          - "16"
        default: "8"
      deployment_mode:
        description: "Deployment behaviour (update uses latest, passive skips if running, forced recreates)"
        required: true
        type: choice
        options:
          - update
          - passive
          - forced
        default: forced

env:
  CONTAINER_REPOSITORY: "hpc/azure-cyclecloud"
  CONTAINER_REGISTRY: "mcr.microsoft.com"

jobs:
  # ========================================
  # STAGE 1: VALIDATION
  # ========================================
  validate-prerequisites:
    name: "Stage 1: Validate Prerequisites"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    outputs:
      azure-resource-group: ${{ steps.config.outputs.azure-resource-group }}
      azure-region: ${{ steps.config.outputs.azure-region }}
      vnet-name: ${{ steps.config.outputs.vnet-name }}
      vnet-resource-group: ${{ steps.config.outputs.vnet-resource-group }}
      subnet-name: ${{ steps.config.outputs.subnet-name }}
      subnet-id: ${{ steps.validate-network.outputs.subnet-id }}
      validation-status: ${{ steps.validate-all.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login using federated credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve and validate configuration
        id: config
        shell: bash
        run: |
          set -euo pipefail
          
          # Resolve configuration from repository variables
          AZURE_RESOURCE_GROUP="${{ vars.RESOURCE_GROUP }}"
          AZURE_REGION="${{ vars.AZURE_REGION }}"
          VNET_NAME="${{ vars.VIRTUAL_NETWORK_NAME }}"
          VNET_RESOURCE_GROUP="${{ vars.VIRTUAL_NETWORK_RESOURCE_GROUP_NAME }}"
          SUBNET_NAME="${{ vars.VIRTUAL_NETWORK_SUBNET_NAME }}"

          # Check required repository variables
          MISSING_VARS=()
          
          if [ -z "$AZURE_RESOURCE_GROUP" ]; then
            MISSING_VARS+=("RESOURCE_GROUP")
          fi
          if [ -z "$AZURE_REGION" ]; then
            MISSING_VARS+=("AZURE_REGION")
          fi
          if [ -z "$VNET_NAME" ]; then
            MISSING_VARS+=("VIRTUAL_NETWORK_NAME")
          fi
          if [ -z "$VNET_RESOURCE_GROUP" ]; then
            MISSING_VARS+=("VIRTUAL_NETWORK_RESOURCE_GROUP_NAME")
          fi
          if [ -z "$SUBNET_NAME" ]; then
            MISSING_VARS+=("VIRTUAL_NETWORK_SUBNET_NAME")
          fi

          if [ ${#MISSING_VARS[@]} -gt 0 ]; then
            echo "::error::Missing required repository variables:"
            printf "::error::  - %s\\n" "${MISSING_VARS[@]}"
            echo "::error::"
            echo "::error::Configure these at: Settings → Secrets and Variables → Actions → Variables"
            exit 1
          fi

          # Export outputs
          echo "azure-resource-group=$AZURE_RESOURCE_GROUP" >> "$GITHUB_OUTPUT"
          echo "azure-region=$AZURE_REGION" >> "$GITHUB_OUTPUT"
          echo "vnet-name=$VNET_NAME" >> "$GITHUB_OUTPUT"
          echo "vnet-resource-group=$VNET_RESOURCE_GROUP" >> "$GITHUB_OUTPUT"
          echo "subnet-name=$SUBNET_NAME" >> "$GITHUB_OUTPUT"

          echo "✅ Configuration validation passed"
          echo "  Resource Group: $AZURE_RESOURCE_GROUP"
          echo "  Region: $AZURE_REGION"  
          echo "  VNet: $VNET_NAME (RG: $VNET_RESOURCE_GROUP)"
          echo "  Subnet: $SUBNET_NAME"

      - name: Validate service principal permissions
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Validating Azure access and permissions..."
          az account show --output table

          AZURE_CREDS='${{ secrets.AZURE_CREDENTIALS }}'
          CLIENT_ID=$(printf "%s" "$AZURE_CREDS" | jq -r '.clientId // empty')
          
          if [ -n "$CLIENT_ID" ]; then
            echo "Service principal: $CLIENT_ID"
            
            # Check if we can list role assignments (requires adequate permissions)
            if az role assignment list --assignee "$CLIENT_ID" --output table; then
              echo "✅ Service principal permissions verified"
            else
              echo "::warning::Cannot verify role assignments. Ensure service principal has required permissions."
            fi
          else
            echo "::warning::Could not extract clientId from AZURE_CREDENTIALS"
          fi

      - name: Validate Azure resources
        shell: bash
        run: |
          set -euo pipefail
          
          RESOURCE_GROUP="${{ steps.config.outputs.azure-resource-group }}"
          
          echo "Validating Azure resource group access..."
          if ! az group exists --name "$RESOURCE_GROUP" >/dev/null; then
            echo "::error::Resource group '$RESOURCE_GROUP' does not exist or you lack permissions."
            echo "::error::Ensure the service principal has Contributor access to this resource group."
            exit 1
          fi
          
          echo "✅ Resource group '$RESOURCE_GROUP' exists and is accessible"

      - name: Validate network resources  
        id: validate-network
        shell: bash
        run: |
          set -euo pipefail
          
          VNET_NAME="${{ steps.config.outputs.vnet-name }}"
          VNET_RG="${{ steps.config.outputs.vnet-resource-group }}"
          SUBNET_NAME="${{ steps.config.outputs.subnet-name }}"
          
          echo "Validating VNet configuration for private networking..."
          
          # Check VNet exists
          if ! az network vnet show --resource-group "$VNET_RG" --name "$VNET_NAME" >/dev/null; then
            echo "::error::Virtual network '$VNET_NAME' not found in resource group '$VNET_RG'"
            echo "::error::Create VNet first or check repository variable: VIRTUAL_NETWORK_RESOURCE_GROUP_NAME"
            exit 1
          fi
          
          # Check subnet exists
          if ! az network vnet subnet show --resource-group "$VNET_RG" --vnet-name "$VNET_NAME" --name "$SUBNET_NAME" >/dev/null; then
            echo "::error::Subnet '$SUBNET_NAME' not found in VNet '$VNET_NAME'"
            echo "::error::Create subnet first or check repository variable: VIRTUAL_NETWORK_SUBNET_NAME"  
            exit 1
          fi
          
          # Get subnet ID for later stages
          SUBNET_ID=$(az network vnet subnet show \
            --resource-group "$VNET_RG" \
            --vnet-name "$VNET_NAME" \
            --name "$SUBNET_NAME" \
            --query id --output tsv)
          
          echo "subnet-id=$SUBNET_ID" >> "$GITHUB_OUTPUT"
          
          echo "✅ Network validation passed"
          echo "  VNet: $VNET_NAME (RG: $VNET_RG)"
          echo "  Subnet: $SUBNET_NAME" 
          echo "  Subnet ID: $SUBNET_ID"

      - name: Mark validation complete
        id: validate-all
        shell: bash
        run: |
          echo "status=success" >> "$GITHUB_OUTPUT"
          echo "🎉 All prerequisites validated successfully!"

  # ========================================
  # STAGE 2: PLANNING  
  # ========================================
  plan-deployment:
    name: "Stage 2: Plan Deployment"
    runs-on: ubuntu-latest
    needs: validate-prerequisites
    if: needs.validate-prerequisites.outputs.validation-status == 'success'
    outputs:
      selected-image-tag: ${{ steps.discover-image.outputs.selected-tag }}
      deployment-action: ${{ steps.plan.outputs.action }}
      deployment-reason: ${{ steps.plan.outputs.reason }}
      should-deploy: ${{ steps.plan.outputs.should-deploy }}
      should-delete-existing: ${{ steps.plan.outputs.should-delete-existing }}
      
    steps:
      - name: Azure login using federated credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Discover CycleCloud image from MCR
        id: discover-image
        shell: bash
        run: |
          set -euo pipefail
          
          REQUESTED_TAG="${{ inputs.image_tag }}"
          MODE="${{ inputs.deployment_mode }}"
          
          echo "Discovering available CycleCloud images from Microsoft Container Registry..."
          
          # Fetch available tags
          TAG_LIST_URL="https://${{ env.CONTAINER_REGISTRY }}/v2/${{ env.CONTAINER_REPOSITORY }}/tags/list"
          
          if ! curl -fsSL "$TAG_LIST_URL" -o mcr-tags.json; then
            echo "::error::Failed to fetch tags from Microsoft Container Registry"
            exit 1
          fi

          # Parse tags and select appropriate one
          python3 - <<'EOF'
          import json
          import re
          import os
          
          with open('mcr-tags.json') as f:
              data = json.load(f)
              
          tags = sorted(set(data.get("tags", [])))
          if not tags:
              print("::error::No tags found in registry")
              exit(1)
          
          requested = os.environ.get("REQUESTED_TAG", "latest")
          mode = os.environ.get("MODE", "forced")
          
          # Find semantic version tags
          semver_pattern = re.compile(r"^(\d+)\.(\d+)\.(\d+)(?:[-_].*)?$")
          semver_tags = []
          for tag in tags:
              match = semver_pattern.match(tag)
              if match:
                  semver_tags.append(((int(match.group(1)), int(match.group(2)), int(match.group(3))), tag))
          
          semver_tags.sort(reverse=True)
          latest_semver = semver_tags[0][1] if semver_tags else None
          
          # Select tag based on mode and request
          if mode == "update" and latest_semver:
              selected = latest_semver
              reason = "latest semantic version for update mode"
          elif requested == "latest" and latest_semver:
              selected = latest_semver  
              reason = "resolved 'latest' to newest semantic version"
          elif requested in tags:
              selected = requested
              reason = "user-specified tag"
          else:
              print(f"::error::Tag '{requested}' not found. Available: {', '.join(tags[:10])}...")
              exit(1)
          
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"selected-tag={selected}\\n")
              f.write(f"selection-reason={reason}\\n")
              
          print(f"Selected image tag: {selected} ({reason})")
          EOF

      - name: Inspect existing container
        id: existing
        shell: bash  
        run: |
          set -euo pipefail
          
          RESOURCE_GROUP="${{ needs.validate-prerequisites.outputs.azure-resource-group }}"
          CONTAINER_NAME="${{ inputs.container_instance_name }}"
          
          echo "Checking for existing container instance..."
          
          if az container show --resource-group "$RESOURCE_GROUP" --name "$CONTAINER_NAME" --output json > existing.json 2>/dev/null; then
            EXISTS="true"
            STATE=$(jq -r '.instanceView.state // "unknown"' existing.json)
            CURRENT_IMAGE=$(jq -r '.containers[0].properties.image // ""' existing.json) 
            CURRENT_TAG=""
            if [[ "$CURRENT_IMAGE" == *:* ]]; then
              CURRENT_TAG="${CURRENT_IMAGE##*:}"
            fi
            PRIVATE_IP=$(jq -r '.ipAddress.ip // "unassigned"' existing.json)
            
            echo "Found existing container:"
            echo "  State: $STATE"
            echo "  Image: $CURRENT_IMAGE"
            echo "  Private IP: $PRIVATE_IP"
          else
            EXISTS="false"
            STATE="absent"
            CURRENT_TAG=""
            PRIVATE_IP="unassigned"
            echo "No existing container found"
          fi
          
          echo "exists=$EXISTS" >> "$GITHUB_OUTPUT"
          echo "state=$STATE" >> "$GITHUB_OUTPUT"  
          echo "current-tag=$CURRENT_TAG" >> "$GITHUB_OUTPUT"
          echo "private-ip=$PRIVATE_IP" >> "$GITHUB_OUTPUT"

      - name: Plan deployment action
        id: plan
        shell: bash
        run: |
          set -euo pipefail
          
          MODE="${{ inputs.deployment_mode }}"
          EXISTS="${{ steps.existing.outputs.exists }}"
          CURRENT_STATE="${{ steps.existing.outputs.state }}"
          CURRENT_TAG="${{ steps.existing.outputs.current-tag }}"
          TARGET_TAG="${{ steps.discover-image.outputs.selected-tag }}"
          
          SHOULD_DEPLOY="false"
          SHOULD_DELETE="false"
          ACTION=""
          REASON=""
          
          case "$MODE" in
            passive)
              if [ "$EXISTS" = "true" ] && [ "$CURRENT_STATE" = "Running" ]; then
                ACTION="skip"
                REASON="Passive mode: healthy container already running ($CURRENT_TAG)"
              else
                SHOULD_DEPLOY="true" 
                ACTION="deploy"
                REASON="Passive mode: no healthy container found, deploying $TARGET_TAG"
              fi
              ;;
            update)
              if [ "$EXISTS" != "true" ]; then
                SHOULD_DEPLOY="true"
                ACTION="deploy"
                REASON="Update mode: no existing container, deploying $TARGET_TAG"
              elif [ "$CURRENT_TAG" = "$TARGET_TAG" ]; then
                ACTION="skip"
                REASON="Update mode: already on target tag $TARGET_TAG"  
              else
                SHOULD_DEPLOY="true"
                SHOULD_DELETE="true"
                ACTION="update"
                REASON="Update mode: upgrading from $CURRENT_TAG to $TARGET_TAG"
              fi
              ;;
            forced)
              SHOULD_DEPLOY="true"
              if [ "$EXISTS" = "true" ]; then
                SHOULD_DELETE="true"  
                ACTION="replace"
                REASON="Forced mode: replacing existing container with $TARGET_TAG"
              else
                ACTION="deploy"
                REASON="Forced mode: deploying new container with $TARGET_TAG"
              fi
              ;;
          esac
          
          echo "should-deploy=$SHOULD_DEPLOY" >> "$GITHUB_OUTPUT"
          echo "should-delete-existing=$SHOULD_DELETE" >> "$GITHUB_OUTPUT"
          echo "action=$ACTION" >> "$GITHUB_OUTPUT"
          echo "reason=$REASON" >> "$GITHUB_OUTPUT"
          
          echo "📋 Deployment Plan:"
          echo "  Mode: $MODE"
          echo "  Action: $ACTION"
          echo "  Reason: $REASON"
          echo "  Will deploy: $SHOULD_DEPLOY"
          echo "  Will delete existing: $SHOULD_DELETE"

  # ========================================
  # STAGE 3: DEPLOYMENT
  # ========================================
  deploy-container:
    name: "Stage 3: Deploy Container"
    runs-on: ubuntu-latest
    needs: [validate-prerequisites, plan-deployment]
    if: needs.plan-deployment.outputs.should-deploy == 'true'
    outputs:
      deployment-status: ${{ steps.deploy.outputs.status }}
      container-state: ${{ steps.verify.outputs.state }}
      container-ip: ${{ steps.verify.outputs.private-ip }}
      
    steps:
      - name: Azure login using federated credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete existing container if required
        if: needs.plan-deployment.outputs.should-delete-existing == 'true'
        shell: bash
        run: |
          set -euo pipefail
          
          RESOURCE_GROUP="${{ needs.validate-prerequisites.outputs.azure-resource-group }}"
          CONTAINER_NAME="${{ inputs.container_instance_name }}"
          
          echo "Deleting existing container before deployment..."
          az container delete \
            --resource-group "$RESOURCE_GROUP" \
            --name "$CONTAINER_NAME" \
            --yes \
            --only-show-errors || true
          
          echo "✅ Existing container deleted"

      - name: Deploy container instance
        id: deploy
        shell: bash
        run: |
          set -euo pipefail
          
          RESOURCE_GROUP="${{ needs.validate-prerequisites.outputs.azure-resource-group }}"
          REGION="${{ needs.validate-prerequisites.outputs.azure-region }}"
          SUBNET_ID="${{ needs.validate-prerequisites.outputs.subnet-id }}"
          CONTAINER_NAME="${{ inputs.container_instance_name }}"
          IMAGE_TAG="${{ needs.plan-deployment.outputs.selected-image-tag }}"
          
          IMAGE_FULL="${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_REPOSITORY }}:$IMAGE_TAG"
          
          echo "Deploying container: $IMAGE_FULL"
          echo "Deployment reason: ${{ needs.plan-deployment.outputs.deployment-reason }}"
          
          # Deploy with retry logic
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Deployment attempt $(($RETRY_COUNT + 1))/$MAX_RETRIES..."
            
            if az container create \
              --resource-group "$RESOURCE_GROUP" \
              --name "$CONTAINER_NAME" \
              --image "$IMAGE_FULL" \
              --cpu "${{ inputs.cpu_cores }}" \
              --memory "${{ inputs.memory_gb }}" \
              --os-type Linux \
              --restart-policy Always \
              --ports 80 443 8080 \
              --environment-variables CYCLECLOUD_AZURE_INTEGRATION=true \
              --location "$REGION" \
              --subnet "$SUBNET_ID" \
              --output none; then
              
              echo "status=success" >> "$GITHUB_OUTPUT"
              echo "✅ Container deployed successfully on attempt $(($RETRY_COUNT + 1))"
              break
            else
              RETRY_COUNT=$(($RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "::warning::Deployment failed, retrying in 30 seconds..."
                sleep 30
              else
                echo "status=failed" >> "$GITHUB_OUTPUT"
                echo "::error::Deployment failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

      - name: Verify deployment
        id: verify
        shell: bash
        run: |
          set -euo pipefail
          
          RESOURCE_GROUP="${{ needs.validate-prerequisites.outputs.azure-resource-group }}"
          CONTAINER_NAME="${{ inputs.container_instance_name }}"
          
          echo "Waiting for container to be ready..."
          
          # Wait for provisioning to complete
          az container wait \
            --resource-group "$RESOURCE_GROUP" \
            --name "$CONTAINER_NAME" \
            --created \
            --timeout 600 || {
              echo "::warning::Wait timeout reached, continuing with status check..."
            }
          
          # Get final status
          STATE=$(az container show \
            --resource-group "$RESOURCE_GROUP" \
            --name "$CONTAINER_NAME" \
            --query "instanceView.state" --output tsv)
          
          PRIVATE_IP=$(az container show \
            --resource-group "$RESOURCE_GROUP" \
            --name "$CONTAINER_NAME" \
            --query "ipAddress.ip" --output tsv)
          
          echo "state=$STATE" >> "$GITHUB_OUTPUT"
          echo "private-ip=$PRIVATE_IP" >> "$GITHUB_OUTPUT"
          
          echo "✅ Container Status:"
          echo "  State: $STATE"
          echo "  Private IP: $PRIVATE_IP"
          echo "  CycleCloud URL: http://$PRIVATE_IP:8080"

  # ========================================
  # STAGE 4: REPORTING
  # ========================================  
  generate-outputs:
    name: "Stage 4: Generate Outputs"
    runs-on: ubuntu-latest
    needs: [validate-prerequisites, plan-deployment, deploy-container]
    if: always() && needs.validate-prerequisites.outputs.validation-status == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate deployment report
        shell: bash
        run: |
          set -euo pipefail
          
          # Determine final status
          if [ "${{ needs.plan-deployment.outputs.should-deploy }}" = "true" ]; then
            if [ "${{ needs.deploy-container.outputs.deployment-status }}" = "success" ]; then
              FINAL_STATUS="✅ Deployed Successfully"
              CONTAINER_STATE="${{ needs.deploy-container.outputs.container-state }}"
              PRIVATE_IP="${{ needs.deploy-container.outputs.container-ip }}"
            else
              FINAL_STATUS="❌ Deployment Failed" 
              CONTAINER_STATE="failed"
              PRIVATE_IP="unassigned"
            fi
          else
            FINAL_STATUS="⏭️ Deployment Skipped"
            CONTAINER_STATE="existing"
            PRIVATE_IP="see existing container"
          fi
          
          cat > CYCLECLOUD_DEPLOYMENT_REPORT.md <<EOF
          # CycleCloud Deployment Report
          
          ## Status: $FINAL_STATUS
          
          ### Configuration
          - **Container**: ${{ inputs.container_instance_name }}
          - **Resource Group**: ${{ needs.validate-prerequisites.outputs.azure-resource-group }}
          - **Region**: ${{ needs.validate-prerequisites.outputs.azure-region }}
          - **Image Tag**: ${{ needs.plan-deployment.outputs.selected-image-tag }}
          - **CPU**: ${{ inputs.cpu_cores }} cores
          - **Memory**: ${{ inputs.memory_gb }} GB
          - **Mode**: ${{ inputs.deployment_mode }}
          
          ### Network Configuration (Private Only)
          - **VNet**: ${{ needs.validate-prerequisites.outputs.vnet-name }}
          - **Subnet**: ${{ needs.validate-prerequisites.outputs.subnet-name }}
          - **Private IP**: $PRIVATE_IP
          - **Public IP**: ❌ None (secure deployment)
          
          ### Deployment Decision
          - **Action**: ${{ needs.plan-deployment.outputs.action }}
          - **Reason**: ${{ needs.plan-deployment.outputs.deployment-reason }}
          
          ### Access Information
          **⚠️ Private Network Only - Requires VPN/Bastion/Jump Box**
          
          - **CycleCloud Web UI**: http://$PRIVATE_IP:8080
          - **Admin Username**: Use your CYCLECLOUD_ADMIN_USERNAME secret
          - **Admin Password**: Use your CYCLECLOUD_ADMIN_PASSWORD secret
          
          ### Next Steps
          1. **Connect to your VNet** (VPN, Bastion, or Jump Box)
          2. **Access CycleCloud UI** at the private IP above
          3. **Run Workflow 2** to create PBS Pro cluster
          
          ### Management Commands
          \`\`\`bash
          # Check container status
          az container show \\
            --resource-group "${{ needs.validate-prerequisites.outputs.azure-resource-group }}" \\
            --name "${{ inputs.container_instance_name }}"
          
          # View container logs  
          az container logs \\
            --resource-group "${{ needs.validate-prerequisites.outputs.azure-resource-group }}" \\
            --name "${{ inputs.container_instance_name }}"
          
          # Restart container
          az container restart \\
            --resource-group "${{ needs.validate-prerequisites.outputs.azure-resource-group }}" \\
            --name "${{ inputs.container_instance_name }}"
          \`\`\`
          
          ---
          **Generated**: $(date -u)  
          **Workflow**: ${{ github.workflow }}  
          **Run**: ${{ github.run_number }}
          EOF
          
          echo "📊 Deployment report generated"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cyclecloud-deployment-${{ inputs.environment }}-${{ github.run_number }}
          path: |
            CYCLECLOUD_DEPLOYMENT_REPORT.md
          retention-days: 30

      - name: Deployment summary
        shell: bash
        run: |
          echo "## 🚀 CycleCloud Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.plan-deployment.outputs.should-deploy }}" = "true" ]; then
            if [ "${{ needs.deploy-container.outputs.deployment-status }}" = "success" ]; then
              echo "✅ **Status**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
              echo "🌐 **Access**: http://${{ needs.deploy-container.outputs.container-ip }}:8080 (private)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Status**: Deployment skipped" >> $GITHUB_STEP_SUMMARY
            echo "📋 **Reason**: ${{ needs.plan-deployment.outputs.deployment-reason }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Connect to VNet (VPN/Bastion/Jump Box)" >> $GITHUB_STEP_SUMMARY
          echo "2. Access CycleCloud UI at private IP" >> $GITHUB_STEP_SUMMARY  
          echo "3. Run **Workflow 2** to create PBS cluster" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📥 Download deployment report artifact for detailed access instructions." >> $GITHUB_STEP_SUMMARY